alias: um-layer
description: Universal Messaging Realm server

environments:
  default:
    repo.product:        ${}
    repo.fix:            ${}
    repo.spm:            ${repo.product}

    target.os.platform:   lnxamd64
    um.license.key.alias: UniversalMessaging-${target.os.platform}

    um.provisioning.host: ${}                       # This is the provisoning host name (where the UM instance / product should be installed)
    um.access.host:       ${um.provisioning.host}   # This is the access host name (general access - generally should be equal to um.provisioning.host, but not in case of docker creation)
    um.instance.name:    umserver           # realm server instance name
    um.instance.port:    9000               # primary port
    um.instance.ip:      ${}                # this is the IP that the UM process will bind to
    um.jmx.port:         9988               # jmx port
    um.memory.init:      1024                 # memory configuration
    um.memory.max:       4096                # memory configuration
    um.memory.direct:    1G                 # memory configuration
    um.fixes:            [wMFix.NUMRealmServer]                # all fixes
    install.service:     true

    um.jndi.factory.url: "nsp://${um.access.host}:${um.instance.port}"
    um.jndi.cf:          umcf
    um.jndi.cfxa:        umcfxa
    um.jndi.qcf:         umqcf
    um.jndi.tcf:         umtcf
    um.jndi.dest.queue1:  umqueue
    um.jndi.dest.topic1:  umtopic


    # Remote system configuration
    spm.port:            8092                    # SPM connection port
    spm.secure:          false                   # Use HTTPS connection to SPM: true,false
    spm.configure:       [spm-tuneup]
    spm.fixes:           [wMFix.SPM]             # SPM/SUM/SD core fixes by default

    ## remote provisioning
    spm.host:         ${um.provisioning.host}   # REQUIRED for all in one installation as default host
    os.platform:      ${target.os.platform}     # remote machine OS platform code
    os.username:      ${}                       # remote machine SSH username, default CCE process user account (as java system property)
    os.password:      ${}                       # remote machine SSH password
    os.auth.method:   ${}                       # remote machine authentication method: PASSWORD,INTERACTIVE,CERTIFICATE
    os.auth.key:      ${}                       # keyfile for CERTIFICATE auth method
    os.ssh.port:      ${}                        # remote machine SSH port
    install.dir:      ${}                       # suite installation directory
    spm.distribution: ALL                       # EXPERIMENTAL! distribution, ALL, DEF, MIN
    spm.useImage:     false                     # EXPERIMENTAL! false for direct connection to the MASTER repo!

  server:

  docker:
    repo.product:           products
    repo.fix:               fixes
    um.provisioning.host:   localhost
    spm.alias:              local
    install.service:        false
    um.access.host:         "umserver"        # important: this is the external URL that the UM instance can be accessed at via JNDI CF URLs
    um.instance.ip:         "0.0.0.0"         # important to set that here so the UM docker image is set to listen on all interfaces (vs. just localhost)

layers:
  default:
    productRepo: ${repo.product}
    fixRepo:     ${repo.fix}
  spm:
    description: Management layer of SPM's
    templates:   ${spm.configure}
  um:
    templates:
      - um-server

templates:
  spm-tuneup:
    description: SPM customizations
    fixes: ${spm.fixes}
    products:
      SPM:
      NUMspm:

  um-server:
    licenses:
      "UniversalMessaging/server/templates/licence.xml": "${um.license.key.alias}"
    fixes: ${um.fixes}
    products:
      NUMRealmServer:
        ${um.instance.name}:                                       # instance name is different from realm
          instance.port: ${um.instance.port}                       # instance port
          instance.ip:   ${um.instance.ip}                         # bind to node's host name
          install.service: ${install.service}
          license.file:  UniversalMessaging/server/templates/licence.xml
          runtimeComponentId: Universal-Messaging-${um.instance.name} # hint for CC to skip instance creation if it exists
          configuration:
            Universal-Messaging-${um.instance.name}:
              COMMON-MEMORY:
                COMMON-MEMORY:
                  InitSize: ${um.memory.init}
                  MaxSize:  ${um.memory.max}
                  ExtendedProperties:
                    Property:
                      -
                       "@name": "-XX:MaxDirectMemorySize"
                       $: ${um.memory.direct}
              COMMON-JAVASYSPROPS:
                COMMON-JAVASYSPROPS: |
                   REALM=${um.instance.name}                             # IMPORTANT: this can only be set before first startup
                   com.sun.management.jmxremote.port=${um.jmx.port}
                   com.sun.management.jmxremote.authenticate=false
                   com.sun.management.jmxremote.ssl=false
                   CORE_SPIN=false
              UM-JNDI-CF:                                                ## JNDI connection factories for JMS
                UM-JNDI-CF-${um.jndi.cf}:
                  name: ${um.jndi.cf}
                  type: ConnectionFactory
                  url: ${um.jndi.factory.url}
                  durableType: Shared
                UM-JNDI-CF-${um.jndi.cfxa}:
                  name: ${um.jndi.cfxa}
                  type: XAConnectionFactory
                  url: ${um.jndi.factory.url}
                UM-JNDI-CF-${um.jndi.qcf}:
                  name: ${um.jndi.qcf}
                  type: QueueConnectionFactory
                  url: ${um.jndi.factory.url}
                UM-JNDI-CF-${um.jndi.tcf}:
                  name: ${um.jndi.tcf}
                  type: TopicConnectionFactory
                  url: ${um.jndi.factory.url}
                  durableType: Shared
              UM-JNDI-DEST:                                             ## JNDI destinations for JMS (queues or topics)
                UM-JNDI-DEST-${um.jndi.dest.queue1}:
                  name: ${um.jndi.dest.queue1}
                  type: Queue
                  storeName: ${um.jndi.dest.queue1}
                  autoCreateDest: 'true'
                UM-JNDI-DEST-${um.jndi.dest.topic1}:
                  name: ${um.jndi.dest.topic1}
                  type: Topic
                  storeName: ${um.jndi.dest.topic1}
                  autoCreateDest: 'true'

provision:
  default:
    spm: ["${um.provisioning.host}"]
    um:  ["${um.provisioning.host}"]
  server:
    spm: ["${um.provisioning.host}"]
    um:  ["${um.provisioning.host}"]
  docker:
    spm:  ["${spm.alias}"]
    um:   ["${spm.alias}"]

nodes:
  default:
    default:
      port:   ${spm.port}
      secure: ${spm.secure}
      bootstrapInfo:
        installDir:   ${install.dir}
        installer:    ${install.installer}
        port:         ${os.ssh.port}
        credentials:
          userName:   ${os.username}
          password:   ${os.password}
          authenticationMethod: ${os.auth.method}
          privateKey: ${os.auth.key}
  docker:
    ${spm.alias}:
      host: ${um.provisioning.host}