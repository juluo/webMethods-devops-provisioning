alias: tc-layer
description: Terracotta Big Memory server

environments:
  default:
    repo.product:        ${}
    repo.fix:            ${}
    repo.spm:            ${repo.product}

    target.os.platform:   lnxamd64          # w64/lnxamd64/solamd64/sol/aix
    tc.license.key.alias:  terracotta-license-${target.os.platform}

    # TC Server Instance Configuration
    tc.configure:        [tc-runtime]
    tc.host:             ${}          ## this should be the actual machine host
    tc.instance.name:    tcserver     ## not used...using host for name too
    tc.tsa.port:         9510
    tc.jmx.port:         9520
    tc.grp.port:         9530
    tc.mgt.port:         9540
    tc.memory.init:      1024               # minimil memory configuration
    tc.memory.max:       2048               # minimal memory configuration
    tc.storage.size:     2g
    tc.offheap.size:     1g
    tc.fixes:            [wMFix.TES]       # ALL
    tc.data.dir:         ../data
    tc.logs.dir:         ../logs
    tc.index.dir:        ../index
    install.service:     false

    # Remote system configuration
    spm.port:       8092                    # SPM connection port
    spm.secure:     false                   # Use HTTPS connection to SPM: true,false
    spm.configure:  [spm-tuneup]
    spm.fixes:      [wMFix.SPM]             # SPM/SUM/SD core fixes by default

    ## remote provisioning
    spm.host:         ${tc.host}                # REQUIRED for all in one installation as default host
    os.platform:      ${target.os.platform}     # remote machine OS platform code
    os.username:      ${}                       # remote machine SSH username, default CCE process user account (as java system property)
    os.password:      ${}                       # remote machine SSH password
    os.auth.method:   ${}                       # remote machine authentication method: PASSWORD,INTERACTIVE,CERTIFICATE
    os.auth.key:      ${}                       # keyfile for CERTIFICATE auth method
    os.ssh.port:      ${}                        # remote machine SSH port
    install.dir:      ${}                       # suite installation directory
    spm.distribution: ALL                       # EXPERIMENTAL! distribution, ALL, DEF, MIN
    spm.useImage:     false                     # EXPERIMENTAL! false for direct connection to the MASTER repo!

  server:

  cluster:
    tc.host2:           ${}                 # REQURIED tc installation host2
    tc.instance.name:   tcserver1           ## not used...using host for name too
    tc.instance.name2:  tcserver2           ## not used...using host for name too
    tc.configure:       [tc-runtime,tc-cluster]

  docker:
    repo.product:    products
    repo.fix:        fixes
    tc.host:         localhost
    spm.alias:       local
    install.service: false

layers:
  default:
    productRepo: ${repo.product}
    fixRepo:     ${repo.fix}
  spm:
    description: Management layer of SPM's
    templates:   ${spm.configure}
  tc:
    templates:   ${tc.configure}

templates:
  spm-tuneup:
    description: SPM customizations
    fixes: ${spm.fixes}
    products:
      SPM:
      TESspm: # TES plugin

  tc-runtime:
    licenses:
      "Terracotta/terracotta-license.key": ${tc.license.key.alias}
    fixes: ${tc.fixes}
    products:
      TES:
        default:
          install.service: ${install.service}
          configuration:
            TES-default:
              COMMON-MEMORY:
                COMMON-MEMORY:
                  InitSize: ${tc.memory.init}
                  MaxSize:  ${tc.memory.max}
              TC-SERVER-NAME:
                TC-SERVER-NAME:
                  serverName: ${node.host}
              TC-CONFIG:
                TC-CONFIG: |
                  <?xml version="1.0" encoding="UTF-8" ?>
                  <tc:tc-config
                    xmlns:tc="http://www.terracotta.org/config"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.terracotta.org/schema/terracotta-9.xsd">
                    <servers>
                      <server name="${node.host}" host="${node.host}">
                        <data>${tc.data.dir}</data>
                        <logs>${tc.logs.dir}</logs>
                        <index>${tc.index.dir}</index>
                        <tsa-port>${tc.tsa.port}</tsa-port>
                        <jmx-port>${tc.jmx.port}</jmx-port>
                        <tsa-group-port>${tc.grp.port}</tsa-group-port>
                        <management-port>${tc.mgt.port}</management-port>
                        <dataStorage size="${tc.storage.size}">
                           <offheap size="${tc.offheap.size}"/>
                           <hybrid/>
                        </dataStorage>
                      </server>
                      <update-check>
                          <enabled>false</enabled>
                          <period-days>10</period-days>
                      </update-check>
                      <garbage-collection>
                          <enabled>false</enabled>
                          <verbose>false</verbose>
                          <interval>3600</interval>
                      </garbage-collection>
                      <restartable enabled="true"/>
                      <client-reconnect-window>120</client-reconnect-window>
                    </servers>
                  </tc:tc-config>

  tc-cluster:
    products:
      TES:
        default:
          configuration:
            TES-default:
              TC-CONFIG:
                TC-CONFIG: |
                  <?xml version="1.0" encoding="UTF-8" ?>
                  <tc:tc-config
                      xmlns:tc="http://www.terracotta.org/config"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.terracotta.org/schema/terracotta-9.xsd">
                      <servers>
                          <server name="${tc.host}" host="${tc.host}">
                              <data>${tc.data.dir}</data>
                              <logs>${tc.logs.dir}</logs>
                              <index>${tc.index.dir}</index>
                              <tsa-port>${tc.tsa.port}</tsa-port>
                              <jmx-port>${tc.jmx.port}</jmx-port>
                              <tsa-group-port>${tc.grp.port}</tsa-group-port>
                              <management-port>${tc.mgt.port}</management-port>
                              <dataStorage size="${tc.storage.size}">
                                  <offheap size="${tc.offheap.size}"/>
                                  <hybrid/>
                              </dataStorage>
                          </server>
                          <server name="${tc.host2}" host="${tc.host2}">
                              <data>${tc.data.dir}</data>
                              <logs>${tc.logs.dir}</logs>
                              <index>${tc.index.dir}</index>
                              <tsa-port>${tc.tsa.port}</tsa-port>
                              <jmx-port>${tc.jmx.port}</jmx-port>
                              <tsa-group-port>${tc.grp.port}</tsa-group-port>
                              <management-port>${tc.mgt.port}</management-port>
                              <dataStorage size="${tc.storage.size}">
                                  <offheap size="${tc.offheap.size}"/>
                                  <hybrid/>
                              </dataStorage>
                          </server>
                          <update-check>
                              <enabled>false</enabled>
                              <period-days>10</period-days>
                          </update-check>
                          <garbage-collection>
                              <enabled>false</enabled>
                              <verbose>false</verbose>
                              <interval>3600</interval>
                          </garbage-collection>
                          <restartable enabled="true"/>
                          <client-reconnect-window>120</client-reconnect-window>
                      </servers>
                  </tc:tc-config>

provision:
  default:
    spm:  ["${tc.host}"]
    tc:   ["${tc.host}"]
  server:
    spm:  ["${tc.host}"]
    tc:   ["${tc.host}"]
  cluster:
    spm:  ["${tc.host}", "${tc.host2}"]
    tc:   ["${tc.host}", "${tc.host2}"]
  docker:
    spm:  ["${spm.alias}"]
    tc:   ["${spm.alias}"]

nodes:
  default:
    default:
      port:   ${spm.port}
      secure: ${spm.secure}
      bootstrapInfo:
        installDir:   ${install.dir}
        installer:    ${install.installer}
        port:         ${os.ssh.port}
        credentials:
          userName:   ${os.username}
          password:   ${os.password}
          authenticationMethod: ${os.auth.method}
          privateKey: ${os.auth.key}
  docker:
    ${spm.alias}:
      host: ${tc.host}