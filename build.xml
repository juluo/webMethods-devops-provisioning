<?xml version="1.0"?>
<project name="main" xmlns="antlib:org.apache.tools.ant" basedir="../sag_bpms/provisioning/fromCompositeTemplates" default="apply" xmlns:if="ant:if" xmlns:unless="ant:unless">
    <import file="antcc/main.xml" />

    <!-- standard header start -->
    <dirname file="${ant.file.main}" property="project.dir" />
    <property name="build.dir" location="${project.dir}/build" />
    <property name="install.dir" location="/opt/softwareag" />

    <property environment="env" />

    <target name="_localinit" depends="sagenvInit">
    </target>

    <target name="_localclean" depends="_cleanRuntimeTemplateEnv, sagenv.clean">
    </target>

    <!-- _setRuntimeTemplateEnv must be called first so the copy process happens right,  -->
    <target name="setup" depends="_setRuntimeTemplateEnv,waitForTargetNodeUp,templateApply,_localclean" />

    <target name="setup_withccestart" depends="startcc,setup" />

    <target name="templateApply" description="Apply $CC_TEMPLATE" depends="waitcc,_localinit" >
        <echo message="Applying template with env.properties = ${env.properties}" />

        <!-- call set properties to set soecific env variable in the env file -->
        <antcall target="_setenvproperties">
            <param name="env.properties" value="${env.properties}"/>
        </antcall>

        <property name="template.path" value="templates/${env.CC_TEMPLATE}" />

        <antcall target="sagenv.apply">
            <param name="t" value="${template.path}"/>
            <param name="env.properties" value="${env.properties}"/>
        </antcall>
    </target>

    <target name="waitForTargetNodeUp" description="Wait for target node up" depends="_localinit">
        <set-property-if-nonempty name="cc.spm.host" if-property-isset="env.CC_SPM_HOST" />
        <set-property-if-nonempty name="cc.spm.port" if-property-isset="env.CC_SPM_PORT" />

        <!-- check SPM -->
        <antcall target="_waitForSocketConnect">
            <param name="wait.host" value="${cc.spm.host}" if:set="cc.spm.host" />
            <param name="wait.port" value="${cc.spm.port}" if:set="cc.spm.port"/>
        </antcall>
    </target>

    <target name="_waitForSocketConnect" description="Wait for socker host:port is accessible">
        <condition property="wait.enabled">
            <and>
                <isset property="wait.host" />
                <isset property="wait.port" />
            </and>
        </condition>

        <echo message="Checking connectivity to ${wait.host}:${wait.port}" if:true="wait.enabled"/>
        <echo message="Ignoring... host not set!!" unless:true="wait.enabled" />
        <waitfor maxwait="600" maxwaitunit="second" checkevery="5" checkeveryunit="second" if:true="wait.enabled">
            <socket server="${wait.host}" port="${wait.port}"/>
        </waitfor>
    </target>

    <target name="_getRuntimeTemplateEnv">
        <set-property-if-nonempty name="template.env" if-property-isset="env.CC_TEMPLATE_ENV" />
        <property name="template.env" value="default" />

        <condition property="default.template.env.properties" value="environments/${template.env}/env.properties">
            <available file="environments/${template.env}/env.properties"/>
        </condition>
        <condition property="default.template.env.properties" value="environments/${template.env}.properties">
            <available file="environments/${template.env}.properties"/>
        </condition>
        <condition property="default.template.env.properties.exists" >
            <available file="${default.template.env.properties}"/>
        </condition>
        <echo message="Success: Template Environment File: ${default.template.env.properties}" if:set="default.template.env.properties.exists" />
        <echo message="Error: Template Environment File does not exist" unless:set="default.template.env.properties.exists" />

        <!-- copy the file tu runtime file -->
        <property name="runtime.template.env" value="runtime-${template.env}" />
    </target>

    <target name="_setRuntimeTemplateEnv" depends="_getRuntimeTemplateEnv">
        <!-- copy the file tu runtime file -->
        <property name="runtime.template.env.properties" value="environments/${runtime.template.env}.properties" />
        <copy file="${default.template.env.properties}" tofile="${runtime.template.env.properties}" overwrite="true" if:set="default.template.env.properties.exists"/>

        <!-- check if the copy really happened -->
        <condition property="runtime.template.env.properties.exists" >
            <available file="${runtime.template.env.properties}"/>
        </condition>

        <!-- force env file to be "runtime" as it is the file that should be used by the template apply command -->
        <property name="env" value="${runtime.template.env}" if:set="runtime.template.env.properties.exists"/>
        <echo message="New Environment Property Runtime: ${env}" if:set="env" />
    </target>

    <target name="_cleanRuntimeTemplateEnv" depends="_getRuntimeTemplateEnv">
        <echo message="Cleaning runtime env.properties file = ${runtime.template.env.properties}" />
        <delete file="${runtime.template.env.properties}"/>

        <!-- check if the delete really happened -->
        <condition property="runtime.template.env.properties.exists" >
            <available file="${runtime.template.env.properties}"/>
        </condition>

        <echo message="Error: Template Environment File was not cleaned" if:set="default.template.env.properties.exists" />
        <echo message="Success: Template Environment File was cleaned" unless:set="default.template.env.properties.exists" />
    </target>

    <target name="_setenvproperties">
        <!-- get all properties that starts with SAVEENV_<propname> -->
        <!--<propertyselector property="saveenv.list"-->
                          <!--delimiter=","-->
                          <!--match="SAVEENV_(.*)$"-->
                          <!--select="\1"-->
                          <!--casesensitive="false" />-->

        <!--<foreach list="${pack.list}"-->
                 <!--delimiter=","-->
                 <!--target="print.name"-->
                 <!--param="pack.id" />-->

        <set-property-if-nonempty name="repo.username" if-property-isset="env.REPO_USR" />
        <set-property-if-nonempty name="repo.password" if-property-isset="env.REPO_PWD" />
        <set-property-if-nonempty name="environment.type" if-property-isset="env.ENV_TYPE" />

        <!-- saving to env file because there's no other way...we need to pass these values using that env file -->
        <propertyfile file="${env.properties}">
            <entry key="repo.username" value="${repo.username}" if:set="repo.username" />
            <entry key="repo.password" value="${repo.password}" if:set="repo.password" />
            <entry key="environment.type" value="${environment.type}" if:set="environment.type" />
        </propertyfile>

        <property file="${env.properties}" />
    </target>

    <!--<target name="_setproperties" depends="sagenvInit">-->
        <!--${pack.id}-->
        <!---->
        <!--<set-property-if-nonempty name="environment.type" if-property-isset="env.ENV_TYPE" />-->

        <!-- saving to env file because there's no other way...we need to pass these values using that env file -->
        <!--<propertyfile file="${env.properties}">-->
            <!--<entry key="environment.type" value="${environment.type}" if:set="environment.type" />-->
        <!--</propertyfile>-->
    <!--</target>-->

    <target name="apply_licenses" depends="waitcc,_localinit" description="Import licence keys">
        <property file="${env.properties}" />

        <property name="licenses.dir" value="licenses" unless:set="licenses.zip.url"/>
        <property name="licenses.dir" value="build/licenses" if:set="licenses.zip.url"/>

        <echo if:set="licenses.zip.url">Downloading license keys .zip from: ${licenses.zip.url}</echo>
        <mkdir dir="../sag_bpms/provisioning/fromCompositeTemplates/build/downloads" />
        <get src="${licenses.zip.url}" dest="build/downloads/licenses.zip" usetimestamp="true" if:set="licenses.zip.url" />
        <unzip src="build/downloads/licenses.zip" dest="licenses" if:set="licenses.zip.url" />

        <cc command="list license-tools keys includeHeaders=false" format="csv" outputproperty="aliases" />

        <iterate target="_import-license-files">
            <fileset dir="${licenses.dir}/lnxamd64" includes="*.xml" />
            <fileset dir="${licenses.dir}/w64" includes="*.xml" />
            <fileset dir="${licenses.dir}/any" includes="*.xml" />
            <fileset dir="${licenses.dir}/lnxamd64" includes="*.key" />
            <fileset dir="${licenses.dir}/w64" includes="*.key" />
            <fileset dir="${licenses.dir}/any" includes="*.key" />
        </iterate>

        <echo>Registered license keys</echo>
        <cc command="list license-tools keys" format="tsv"/>
    </target>

    <target name="_import-license-files">
        <property name="alias" value="${filename}-${dirname}"/>
        <!-- chcek if we already have this license key -->
        <contains list="${aliases}" item="${alias}" property="exists" />

        <echo if:true="${exists}">${alias}: already present!</echo>

        <sequential unless:true="${exists}">
            <echo>${alias}: importing from ${dir}/${file}</echo>
            <cc command="add license-tools keys ${alias}" input="${dir}/${file}" failonerror="false" />
        </sequential>
    </target>

    <macrodef name="set-property-if-nonempty">
        <attribute name="name" />
        <attribute name="if-property-isset" />
        <attribute name="value" default="${@{if-property-isset}}" />

        <sequential>
            <condition property="@{name}" value="@{value}">
                <and>
                    <isset property="@{if-property-isset}" />
                    <not>
                        <equals arg1="${@{if-property-isset}}" arg2="" />
                    </not>
                </and>
            </condition>
        </sequential>
    </macrodef>
</project>