ARG PARENT_BUILDER
ARG PARENT_IMAGE

FROM $PARENT_BUILDER as builder

FROM $PARENT_IMAGE

MAINTAINER fabien.sanglier@softwareaggov.com

ENV SAG_HOME /opt/softwareag
ENV UM_HOME $SAG_HOME/UniversalMessaging
ENV UM_PORT 9000
ENV JAVA_HOME $SAG_HOME/jvm/jvm
ENV JRE_HOME $SAG_HOME/jvm/jvm/jre
ENV START_CLEAN "false"

# Default realm name, can be customised by changing this line, or overriding this variable when running the image for the first time. After
# the image has been run once it is too late to change the realm name in subsequent derived images, as it gets baked into persistent
# configuration.
# this should match the um instance that was specified in the CCE template
ENV REALM umserver

# Extra properties to pass to the realm server, intended for settings that can only be configured at realm server startup.
ENV SERVER_OPTS_EXTRA -DCORE_SPIN=false

# Copy the minimum contents from the installation necessary to run a fully-functional realm server and the client tools
COPY --from=builder $SAG_HOME/jvm/jvm/ $SAG_HOME/jvm/jvm/

COPY --from=builder $SAG_HOME/install/jars/ $SAG_HOME/install/jars/
COPY --from=builder $SAG_HOME/install/profile/ $SAG_HOME/install/profile/
COPY --from=builder $SAG_HOME/install/products/ $SAG_HOME/install/products/

COPY --from=builder $SAG_HOME/Licenses/sagosch $SAG_HOME/Licenses/sagosch

COPY --from=builder $SAG_HOME/common/bin/ $SAG_HOME/common/bin/
COPY --from=builder $SAG_HOME/common/conf/ $SAG_HOME/common/conf/
COPY --from=builder $SAG_HOME/common/lib/ $SAG_HOME/common/lib/
COPY --from=builder $SAG_HOME/common/runtime/ $SAG_HOME/common/runtime/

COPY --from=builder $UM_HOME/server/ $UM_HOME/server/
COPY --from=builder $UM_HOME/lib/ $UM_HOME/lib/
COPY --from=builder $UM_HOME/tools/ $UM_HOME/tools/

#### these are not there when build with CCE template...probably should add the NUM client too in the CCE template
#COPY --from=builder $SAG_HOME/UniversalMessaging/classes/ $SAG_HOME/UniversalMessaging/classes/
#COPY --from=builder $SAG_HOME/UniversalMessaging/java/ $SAG_HOME/UniversalMessaging/java/
#COPY --from=builder $SAG_HOME/UniversalMessaging/javascript/lib/ $SAG_HOME/UniversalMessaging/javascript/lib/

# Copy in the entrypoint script to facilitate launching the realm server
COPY entrypoint.sh $UM_HOME/

# Current working directory for all commands. This is where the UM installation is copied to within the image.
WORKDIR $UM_HOME

# Path gives access to 'umctx' and 'java', classpath gives access to all UM libraries
ENV PATH=/bin:/usr/bin:$UM_HOME/:$JAVA_HOME/bin/\
    CLASSPATH=lib/*

# Redirect plugin logs to the same place as the realm logs (i.e. stdout, to be captured by Docker's logging system)
# This is included for the benefit of having complete logging via Docker, but you may prefer to remove this line if you want the plugin logs
# segregated in separate files, rather than interleaved with the main realm server log
#RUN cd /um_home/server/umserver/; mkdir -p plugins/log/; cd plugins/log/; rm -f *; ln -s /dev/stdout error.log; ln -s /dev/stdout plugin.log; ln -s /dev/stdout access.log

LABEL com.softwareag.product="UniversalMessaging" \com.softwareag.product.version="10.1.0.0" \com.softwareag.webmethodscloud.primaryPort="$UM_PORT"

# Expose the NSP/NHP port that the realm server starts an interface for by default
EXPOSE $UM_PORT

# this volumes allows the host filesystem to persist the data (avoiding the cost of the Union Filesystem)
VOLUME $UM_HOME/server/$REALM/data

# The default operation for the image is to start a realm server
CMD ["entrypoint.sh"]